/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef cache_TYPES_H
#define cache_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class GetRequest;

class GetResponse;

typedef struct _GetRequest__isset {
  _GetRequest__isset() : key(false) {}
  bool key :1;
} _GetRequest__isset;

class GetRequest : public virtual ::apache::thrift::TBase {
 public:

  GetRequest(const GetRequest&);
  GetRequest& operator=(const GetRequest&);
  GetRequest() : key() {
  }

  virtual ~GetRequest() throw();
  std::string key;

  _GetRequest__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const GetRequest & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const GetRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetRequest &a, GetRequest &b);

inline std::ostream& operator<<(std::ostream& out, const GetRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _GetResponse__isset {
  _GetResponse__isset() : val(false) {}
  bool val :1;
} _GetResponse__isset;

class GetResponse : public virtual ::apache::thrift::TBase {
 public:

  GetResponse(const GetResponse&);
  GetResponse& operator=(const GetResponse&);
  GetResponse() : val() {
  }

  virtual ~GetResponse() throw();
  std::string val;

  _GetResponse__isset __isset;

  void __set_val(const std::string& val);

  bool operator == (const GetResponse & rhs) const
  {
    if (!(val == rhs.val))
      return false;
    return true;
  }
  bool operator != (const GetResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GetResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(GetResponse &a, GetResponse &b);

inline std::ostream& operator<<(std::ostream& out, const GetResponse& obj)
{
  obj.printTo(out);
  return out;
}



#endif
