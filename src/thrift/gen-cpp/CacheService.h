/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CacheService_H
#define CacheService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "cache_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CacheServiceIf {
 public:
  virtual ~CacheServiceIf() {}
  virtual void Get(GetResponse& _return, const int32_t logid, const GetRequest& req) = 0;
};

class CacheServiceIfFactory {
 public:
  typedef CacheServiceIf Handler;

  virtual ~CacheServiceIfFactory() {}

  virtual CacheServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CacheServiceIf* /* handler */) = 0;
};

class CacheServiceIfSingletonFactory : virtual public CacheServiceIfFactory {
 public:
  CacheServiceIfSingletonFactory(const boost::shared_ptr<CacheServiceIf>& iface) : iface_(iface) {}
  virtual ~CacheServiceIfSingletonFactory() {}

  virtual CacheServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CacheServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CacheServiceIf> iface_;
};

class CacheServiceNull : virtual public CacheServiceIf {
 public:
  virtual ~CacheServiceNull() {}
  void Get(GetResponse& /* _return */, const int32_t /* logid */, const GetRequest& /* req */) {
    return;
  }
};

typedef struct _CacheService_Get_args__isset {
  _CacheService_Get_args__isset() : logid(false), req(false) {}
  bool logid :1;
  bool req :1;
} _CacheService_Get_args__isset;

class CacheService_Get_args {
 public:

  CacheService_Get_args(const CacheService_Get_args&);
  CacheService_Get_args& operator=(const CacheService_Get_args&);
  CacheService_Get_args() : logid(0) {
  }

  virtual ~CacheService_Get_args() throw();
  int32_t logid;
  GetRequest req;

  _CacheService_Get_args__isset __isset;

  void __set_logid(const int32_t val);

  void __set_req(const GetRequest& val);

  bool operator == (const CacheService_Get_args & rhs) const
  {
    if (!(logid == rhs.logid))
      return false;
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const CacheService_Get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_Get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CacheService_Get_pargs {
 public:


  virtual ~CacheService_Get_pargs() throw();
  const int32_t* logid;
  const GetRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_Get_result__isset {
  _CacheService_Get_result__isset() : success(false) {}
  bool success :1;
} _CacheService_Get_result__isset;

class CacheService_Get_result {
 public:

  CacheService_Get_result(const CacheService_Get_result&);
  CacheService_Get_result& operator=(const CacheService_Get_result&);
  CacheService_Get_result() {
  }

  virtual ~CacheService_Get_result() throw();
  GetResponse success;

  _CacheService_Get_result__isset __isset;

  void __set_success(const GetResponse& val);

  bool operator == (const CacheService_Get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CacheService_Get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CacheService_Get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CacheService_Get_presult__isset {
  _CacheService_Get_presult__isset() : success(false) {}
  bool success :1;
} _CacheService_Get_presult__isset;

class CacheService_Get_presult {
 public:


  virtual ~CacheService_Get_presult() throw();
  GetResponse* success;

  _CacheService_Get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CacheServiceClient : virtual public CacheServiceIf {
 public:
  CacheServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CacheServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Get(GetResponse& _return, const int32_t logid, const GetRequest& req);
  void send_Get(const int32_t logid, const GetRequest& req);
  void recv_Get(GetResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CacheServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CacheServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CacheServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CacheServiceProcessor(boost::shared_ptr<CacheServiceIf> iface) :
    iface_(iface) {
    processMap_["Get"] = &CacheServiceProcessor::process_Get;
  }

  virtual ~CacheServiceProcessor() {}
};

class CacheServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CacheServiceProcessorFactory(const ::boost::shared_ptr< CacheServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CacheServiceIfFactory > handlerFactory_;
};

class CacheServiceMultiface : virtual public CacheServiceIf {
 public:
  CacheServiceMultiface(std::vector<boost::shared_ptr<CacheServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CacheServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CacheServiceIf> > ifaces_;
  CacheServiceMultiface() {}
  void add(boost::shared_ptr<CacheServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Get(GetResponse& _return, const int32_t logid, const GetRequest& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Get(_return, logid, req);
    }
    ifaces_[i]->Get(_return, logid, req);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CacheServiceConcurrentClient : virtual public CacheServiceIf {
 public:
  CacheServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CacheServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Get(GetResponse& _return, const int32_t logid, const GetRequest& req);
  int32_t send_Get(const int32_t logid, const GetRequest& req);
  void recv_Get(GetResponse& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
