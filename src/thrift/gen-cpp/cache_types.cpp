/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "cache_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




GetRequest::~GetRequest() throw() {
}


void GetRequest::__set_key(const std::string& val) {
  this->key = val;
}

uint32_t GetRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetRequest");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetRequest &a, GetRequest &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

GetRequest::GetRequest(const GetRequest& other0) {
  key = other0.key;
  __isset = other0.__isset;
}
GetRequest& GetRequest::operator=(const GetRequest& other1) {
  key = other1.key;
  __isset = other1.__isset;
  return *this;
}
void GetRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetRequest(";
  out << "key=" << to_string(key);
  out << ")";
}


GetResponse::~GetResponse() throw() {
}


void GetResponse::__set_val(const std::string& val) {
  this->val = val;
}

uint32_t GetResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->val);
          this->__isset.val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t GetResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("GetResponse");

  xfer += oprot->writeFieldBegin("val", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->val);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(GetResponse &a, GetResponse &b) {
  using ::std::swap;
  swap(a.val, b.val);
  swap(a.__isset, b.__isset);
}

GetResponse::GetResponse(const GetResponse& other2) {
  val = other2.val;
  __isset = other2.__isset;
}
GetResponse& GetResponse::operator=(const GetResponse& other3) {
  val = other3.val;
  __isset = other3.__isset;
  return *this;
}
void GetResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "GetResponse(";
  out << "val=" << to_string(val);
  out << ")";
}


